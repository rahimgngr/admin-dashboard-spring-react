{"ast":null,"code":"var _jsxFileName = \"/home/rahimgng/vscode/admin-dashboard/frontend/src/component/AddProject.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { Card, Form, Button, Col } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ToastComponent from \"./ToastComponent\"; // import moment from \"moment\";\n// const calculateDaysLeft = (startDate, endDate) => {\n//   if (!moment.isMoment(startDate)) startDate = moment(startDate);\n//   if (!moment.isMoment(endDate)) endDate = moment(endDate);\n//   return endDate.diff(startDate, \"days\");\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectContext = /*#__PURE__*/createContext();\n\nconst getCurrentDate = (separator = \"-\") => {\n  let newDate = new Date();\n  let date = newDate.getDate();\n  let month = newDate.getMonth() + 1;\n  let year = newDate.getFullYear();\n  return `${year}${separator}${month < 10 ? `0${month}` : `${month}`}${separator}${date}`;\n};\n\nconst values = {\n  id: \"\",\n  projectName: \"\",\n  startDate: getCurrentDate(),\n  endDate: getCurrentDate()\n};\nexport const AddProject = ({\n  children\n}) => {\n  _s();\n\n  const [form, setForm] = useState(values);\n  const [show, setShow] = useState(false);\n  const [method, setMethod] = useState(\"\");\n  let history = useHistory();\n  let {\n    id\n  } = useParams();\n  /** ---------------------- controller ---------------------- */\n  // Project data save\n\n  const submitProject = async e => {\n    e.preventDefault();\n    await axios.post(\"http://localhost:8080/project/add\", JSON.stringify(form), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.data != null) {\n        setShow(true);\n        setMethod(\"post\");\n        setTimeout(() => setShow(false), 1500);\n      } else {\n        setShow(false);\n      }\n    });\n  };\n  /** update */\n  // Project data update\n\n\n  const updateProject = async e => {\n    e.preventDefault();\n    await axios.put(`http://localhost:8080/project/put/${id}`, JSON.stringify(form), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.data != null) {\n        setShow(true);\n        setMethod(\"put\");\n        setTimeout(() => setShow(false), 1500);\n        setTimeout(() => projectList(true), 1500);\n      } else {\n        setShow(false);\n      }\n    });\n  }; // find project with id to show when we want to update\n\n\n  const findProjectById = async id => {\n    await axios.get(`http://localhost:8080/project/get/${id}`).then(res => {\n      if (res.data != null) {\n        setForm({\n          id: res.data.id,\n          projectName: res.data.projectName,\n          startDate: res.data.startDate,\n          endDate: res.data.endDate\n        });\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  /** update end*/\n\n  /** ---------------------- controller end ---------------------- */\n  // to add in project list\n\n\n  const projectChange = e => {\n    setForm({ ...form,\n      [e.target.name]: e.target.value\n    });\n  }; // to reset project values that we wrote\n\n\n  const resetProject = () => {\n    setForm(values);\n  }; // back to project list\n\n\n  const projectList = () => {\n    setTimeout(() => {\n      history.push(\"/list-project\");\n    }, 1000);\n  }; // for memo\n\n\n  useEffect(() => {\n    findProjectById(id);\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: values,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: show ? \"block\" : \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ToastComponent, {\n          children: {\n            show: show,\n            message: method === \"post\" ? \"Project Saved!\" : \"Project Updated!\",\n            type: \"success\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"border border-dark bg-dark text-white\",\n        style: {\n          margin: \"45px 0px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: id ? \"Update Project\" : \"Save Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          id: \"projectFormId\",\n          onSubmit: id ? updateProject : submitProject,\n          onReset: resetProject,\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                autoComplete: \"off\",\n                type: \"text\",\n                name: \"projectName\",\n                placeholder: \"Enter project name\",\n                className: \"bg-dark text-white\",\n                onChange: projectChange,\n                value: form.projectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Started Date \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"date\",\n                name: \"startDate\",\n                min: values.startDate,\n                placeholder: \"Date of Start\",\n                onChange: projectChange,\n                value: form.startDate,\n                className: \"bg-dark text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"End Date \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"date\",\n                name: \"endDate\",\n                placeholder: \"Date of end\",\n                min: values.startDate,\n                onChange: projectChange,\n                value: form.endDate,\n                className: \"bg-dark text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            style: {\n              textAlign: \"right\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              type: \"submit\",\n              variant: \"success\",\n              style: {\n                margin: \"2px\"\n              },\n              onClick: projectList,\n              children: id ? \"Update\" : \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              type: \"reset\",\n              variant: \"info\",\n              style: {\n                margin: \"2px\"\n              },\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              type: \"button\",\n              variant: \"info\",\n              style: {\n                margin: \"2px\"\n              },\n              onClick: projectList,\n              children: \"Project List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddProject, \"mIpv/ziQubru3LK6QgqFE8mZU/s=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = AddProject;\nexport const useProject = () => {\n  _s2();\n\n  return useContext(ProjectContext);\n};\n\n_s2(useProject, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProject\");","map":{"version":3,"sources":["/home/rahimgng/vscode/admin-dashboard/frontend/src/component/AddProject.js"],"names":["React","useState","useEffect","createContext","useContext","Card","Form","Button","Col","useHistory","useParams","axios","ToastComponent","ProjectContext","getCurrentDate","separator","newDate","Date","date","getDate","month","getMonth","year","getFullYear","values","id","projectName","startDate","endDate","AddProject","children","form","setForm","show","setShow","method","setMethod","history","submitProject","e","preventDefault","post","JSON","stringify","headers","then","res","data","setTimeout","updateProject","put","projectList","findProjectById","get","catch","error","console","projectChange","target","name","value","resetProject","push","display","message","type","margin","textAlign","useProject"],"mappings":"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","sourcesContent":["import \"bootstrap/dist/css/bootstrap.css\";\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { Card, Form, Button, Col } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ToastComponent from \"./ToastComponent\";\n// import moment from \"moment\";\n\n// const calculateDaysLeft = (startDate, endDate) => {\n//   if (!moment.isMoment(startDate)) startDate = moment(startDate);\n//   if (!moment.isMoment(endDate)) endDate = moment(endDate);\n\n//   return endDate.diff(startDate, \"days\");\n// };\n\nconst ProjectContext = createContext();\n\nconst getCurrentDate = (separator = \"-\") => {\n  let newDate = new Date();\n  let date = newDate.getDate();\n  let month = newDate.getMonth() + 1;\n  let year = newDate.getFullYear();\n\n  return `${year}${separator}${\n    month < 10 ? `0${month}` : `${month}`\n  }${separator}${date}`;\n};\n\nconst values = {\n  id: \"\",\n  projectName: \"\",\n  startDate: getCurrentDate(),\n  endDate: getCurrentDate(),\n};\n\nexport const AddProject = ({ children }) => {\n  const [form, setForm] = useState(values);\n  const [show, setShow] = useState(false);\n  const [method, setMethod] = useState(\"\");\n\n  let history = useHistory();\n  let { id } = useParams();\n\n  /** ---------------------- controller ---------------------- */\n\n  // Project data save\n  const submitProject = async (e) => {\n    e.preventDefault();\n\n    await axios\n      .post(\"http://localhost:8080/project/add\", JSON.stringify(form), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        if (res.data != null) {\n          setShow(true);\n          setMethod(\"post\");\n          setTimeout(() => setShow(false), 1500);\n        } else {\n          setShow(false);\n        }\n      });\n  };\n\n  /** update */\n  // Project data update\n  const updateProject = async (e) => {\n    e.preventDefault();\n\n    await axios\n      .put(`http://localhost:8080/project/put/${id}`, JSON.stringify(form), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        if (res.data != null) {\n          setShow(true);\n          setMethod(\"put\");\n          setTimeout(() => setShow(false), 1500);\n          setTimeout(() => projectList(true), 1500);\n        } else {\n          setShow(false);\n        }\n      });\n  };\n\n  // find project with id to show when we want to update\n  const findProjectById = async (id) => {\n    await axios\n      .get(`http://localhost:8080/project/get/${id}`)\n      .then((res) => {\n        if (res.data != null) {\n          setForm({\n            id: res.data.id,\n            projectName: res.data.projectName,\n            startDate: res.data.startDate,\n            endDate: res.data.endDate,\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  /** update end*/\n\n  /** ---------------------- controller end ---------------------- */\n\n  // to add in project list\n  const projectChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  // to reset project values that we wrote\n  const resetProject = () => {\n    setForm(values);\n  };\n\n  // back to project list\n  const projectList = () => {\n    setTimeout(() => {\n      history.push(\"/list-project\");\n    }, 1000);\n  };\n\n  // for memo\n  useEffect(() => {\n    findProjectById(id);\n  }, [id]);\n\n  return (\n    <ProjectContext.Provider value={values}>\n      <div>\n        <div style={{ display: show ? \"block\" : \"none\" }}>\n          <ToastComponent\n            children={{\n              show: show,\n              message:\n                method === \"post\" ? \"Project Saved!\" : \"Project Updated!\",\n              type: \"success\",\n            }}\n          />\n        </div>\n\n        <Card\n          className={\"border border-dark bg-dark text-white\"}\n          style={{ margin: \"45px 0px\" }}\n        >\n          <Card.Header>{id ? \"Update Project\" : \"Save Project\"}</Card.Header>\n\n          <Form\n            id=\"projectFormId\"\n            onSubmit={id ? updateProject : submitProject}\n            onReset={resetProject}\n          >\n            <Card.Body>\n              <Form.Group as={Col}>\n                <Form.Label>Project Name</Form.Label>\n                <Form.Control\n                  required\n                  autoComplete=\"off\"\n                  type=\"text\"\n                  name=\"projectName\"\n                  placeholder=\"Enter project name\"\n                  className={\"bg-dark text-white\"}\n                  onChange={projectChange}\n                  value={form.projectName}\n                />\n              </Form.Group>\n\n              <Form.Group as={Col}>\n                <Form.Label>Started Date </Form.Label>\n                <br />\n                <Form.Control\n                  required\n                  type=\"date\"\n                  name=\"startDate\"\n                  min={values.startDate}\n                  placeholder=\"Date of Start\"\n                  onChange={projectChange}\n                  value={form.startDate}\n                  className={\"bg-dark text-white\"}\n                />\n              </Form.Group>\n              <Form.Group as={Col}>\n                <Form.Label>End Date </Form.Label>\n                <br />\n                <Form.Control\n                  required\n                  type=\"date\"\n                  name=\"endDate\"\n                  placeholder=\"Date of end\"\n                  min={values.startDate}\n                  onChange={projectChange}\n                  value={form.endDate}\n                  className={\"bg-dark text-white\"}\n                />\n              </Form.Group>\n            </Card.Body>\n            <Card.Footer style={{ textAlign: \"right\" }}>\n              <Button\n                size=\"sm\"\n                type=\"submit\"\n                variant=\"success\"\n                style={{ margin: \"2px\" }}\n                onClick={projectList}\n              >\n                {id ? \"Update\" : \"Save\"}\n              </Button>\n              <Button\n                size=\"sm\"\n                type=\"reset\"\n                variant=\"info\"\n                style={{ margin: \"2px\" }}\n              >\n                Reset\n              </Button>\n              <Button\n                size=\"sm\"\n                type=\"button\"\n                variant=\"info\"\n                style={{ margin: \"2px\" }}\n                onClick={projectList}\n              >\n                Project List\n              </Button>\n            </Card.Footer>\n          </Form>\n        </Card>\n      </div>\n      {children}\n    </ProjectContext.Provider>\n  );\n};\n\nexport const useProject = () => useContext(ProjectContext);\n"]},"metadata":{},"sourceType":"module"}