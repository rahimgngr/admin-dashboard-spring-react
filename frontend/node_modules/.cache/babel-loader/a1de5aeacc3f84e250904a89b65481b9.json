{"ast":null,"code":"var _jsxFileName = \"/home/rahimgng/vscode/admin-dashboard/src/component/AddProject.js\",\n    _s = $RefreshSig$();\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Form, Button, Col } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ToastComponent from \"./ToastComponent\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst calculateDaysLeft = (startDate, endDate) => {\n  if (!moment.isMoment(startDate)) startDate = moment(startDate);\n  if (!moment.isMoment(endDate)) endDate = moment(endDate);\n  return endDate.diff(startDate, \"days\");\n};\n\nconst getCurrentDate = (separator = \"-\") => {\n  let newDate = new Date();\n  let date = newDate.getDate();\n  let month = newDate.getMonth() + 1;\n  let year = newDate.getFullYear();\n  return `${year}${separator}${month < 10 ? `0${month}` : `${month}`}${separator}${date}`;\n};\n\nconst values = {\n  id: \"\",\n  projectName: \"\",\n  cost: \"\",\n  startDate: getCurrentDate(),\n  endDate: new Date(),\n  timeLeft: \"\"\n};\n\nfunction AddProject() {\n  _s();\n\n  const [form, setForm] = useState(values);\n  const [show, setShow] = useState(false);\n  const [method, setMethod] = useState(\"\");\n  let history = useHistory();\n  let {\n    id\n  } = useParams();\n  /** ---------------------- controller ---------------------- */\n  // Project data save\n\n  const submitProject = async e => {\n    e.preventDefault();\n    await axios.post(\"http://localhost:8080/project/add\", JSON.stringify(form), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.data != null) {\n        setShow(true);\n        setMethod(\"post\");\n        setTimeout(() => setShow(false), 1500);\n      } else {\n        setShow(false);\n      }\n    });\n  };\n  /** update */\n  // Project data update\n\n\n  const updateProject = async e => {\n    e.preventDefault();\n    await axios.put(`http://localhost:8080/project/put/${id}`, JSON.stringify(form), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.data != null) {\n        setShow(true);\n        setMethod(\"put\");\n        setTimeout(() => setShow(false), 1500);\n        setTimeout(() => projectList(true), 1500);\n      } else {\n        setShow(false);\n      }\n    });\n  }; // find project with id to show when we want to update\n\n\n  const findProjectById = async id => {\n    await axios.get(`http://localhost:8080/project/get/${id}`).then(res => {\n      if (res.data != null) {\n        setForm({\n          id: res.data.id,\n          projectName: res.data.projectName,\n          cost: res.data.cost,\n          time: res.data.time\n        });\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  /** update end*/\n\n  /** ---------------------- controller end ---------------------- */\n  // to add in project list\n\n\n  const projectChange = e => {\n    setForm({ ...form,\n      [e.target.name]: e.target.value\n    });\n  }; // to reset project values that we wrote\n\n\n  const resetProject = () => {\n    setForm(values);\n  }; // back to project list\n\n\n  const projectList = () => {\n    history.push(\"/list-project\");\n  }; // for memo\n\n\n  useEffect(() => {\n    findProjectById(id);\n  }, [id]);\n  console.log(calculateDaysLeft(form.startDate, form.endDate));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: show ? \"block\" : \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ToastComponent, {\n        children: {\n          show: show,\n          message: method === \"post\" ? \"Project Saved!\" : \"Project Updated!\",\n          type: \"success\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      style: {\n        margin: \"45px 0px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: id ? \"Update Project\" : \"Save Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        id: \"projectFormId\",\n        onSubmit: id ? updateProject : submitProject,\n        onReset: resetProject,\n        children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Project Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              required: true,\n              autoComplete: \"off\",\n              type: \"text\",\n              name: \"projectName\",\n              placeholder: \"Enter project name\",\n              className: \"bg-dark text-white\",\n              onChange: projectChange,\n              value: form.projectName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Cost\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              required: true,\n              autoComplete: \"off\",\n              type: \"number\",\n              step: \"any\",\n              name: \"cost\",\n              placeholder: \"Enter project cost\",\n              className: \"bg-dark text-white\",\n              onChange: projectChange,\n              value: form.cost\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Started Date \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              required: true,\n              type: \"date\",\n              name: \"startedTime\",\n              placeholder: \"Date of End\",\n              onChange: projectChange,\n              value: form.startDate,\n              className: \"bg-dark text-white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"End Date \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              required: true,\n              type: \"date\",\n              name: \"endDate\",\n              placeholder: \"Date of Start\",\n              onChange: projectChange,\n              value: form.endDate,\n              className: \"bg-dark text-white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n          style: {\n            textAlign: \"right\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            type: \"submit\",\n            variant: \"success\",\n            style: {\n              margin: \"2px\"\n            },\n            children: id ? \"Update\" : \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            type: \"reset\",\n            variant: \"info\",\n            style: {\n              margin: \"2px\"\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            type: \"button\",\n            variant: \"info\",\n            style: {\n              margin: \"2px\"\n            },\n            onClick: projectList,\n            children: \"Project List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddProject, \"mIpv/ziQubru3LK6QgqFE8mZU/s=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = AddProject;\nexport default _c2 = /*#__PURE__*/React.memo(AddProject);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddProject\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/rahimgng/vscode/admin-dashboard/src/component/AddProject.js"],"names":["React","useState","useEffect","Card","Form","Button","Col","useHistory","useParams","axios","ToastComponent","moment","calculateDaysLeft","startDate","endDate","isMoment","diff","getCurrentDate","separator","newDate","Date","date","getDate","month","getMonth","year","getFullYear","values","id","projectName","cost","timeLeft","AddProject","form","setForm","show","setShow","method","setMethod","history","submitProject","e","preventDefault","post","JSON","stringify","headers","then","res","data","setTimeout","updateProject","put","projectList","findProjectById","get","time","catch","error","console","projectChange","target","name","value","resetProject","push","log","display","message","type","margin","textAlign","memo"],"mappings":"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","sourcesContent":["import \"bootstrap/dist/css/bootstrap.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Form, Button, Col } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ToastComponent from \"./ToastComponent\";\nimport moment from \"moment\";\n\nconst calculateDaysLeft = (startDate, endDate) => {\n  if (!moment.isMoment(startDate)) startDate = moment(startDate);\n  if (!moment.isMoment(endDate)) endDate = moment(endDate);\n\n  return endDate.diff(startDate, \"days\");\n};\n\nconst getCurrentDate = (separator = \"-\") => {\n  let newDate = new Date();\n  let date = newDate.getDate();\n  let month = newDate.getMonth() + 1;\n  let year = newDate.getFullYear();\n\n  return `${year}${separator}${\n    month < 10 ? `0${month}` : `${month}`\n  }${separator}${date}`;\n};\n\nconst values = {\n  id: \"\",\n  projectName: \"\",\n  cost: \"\",\n  startDate: getCurrentDate(),\n  endDate: new Date(),\n  timeLeft: \"\",\n};\n\nfunction AddProject() {\n  const [form, setForm] = useState(values);\n  const [show, setShow] = useState(false);\n  const [method, setMethod] = useState(\"\");\n\n  let history = useHistory();\n  let { id } = useParams();\n\n  /** ---------------------- controller ---------------------- */\n\n  // Project data save\n  const submitProject = async (e) => {\n    e.preventDefault();\n\n    await axios\n      .post(\"http://localhost:8080/project/add\", JSON.stringify(form), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        if (res.data != null) {\n          setShow(true);\n          setMethod(\"post\");\n          setTimeout(() => setShow(false), 1500);\n        } else {\n          setShow(false);\n        }\n      });\n  };\n\n  /** update */\n  // Project data update\n  const updateProject = async (e) => {\n    e.preventDefault();\n\n    await axios\n      .put(`http://localhost:8080/project/put/${id}`, JSON.stringify(form), {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        if (res.data != null) {\n          setShow(true);\n          setMethod(\"put\");\n          setTimeout(() => setShow(false), 1500);\n          setTimeout(() => projectList(true), 1500);\n        } else {\n          setShow(false);\n        }\n      });\n  };\n\n  // find project with id to show when we want to update\n  const findProjectById = async (id) => {\n    await axios\n      .get(`http://localhost:8080/project/get/${id}`)\n      .then((res) => {\n        if (res.data != null) {\n          setForm({\n            id: res.data.id,\n            projectName: res.data.projectName,\n            cost: res.data.cost,\n            time: res.data.time,\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  /** update end*/\n\n  /** ---------------------- controller end ---------------------- */\n\n  // to add in project list\n  const projectChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  // to reset project values that we wrote\n  const resetProject = () => {\n    setForm(values);\n  };\n\n  // back to project list\n  const projectList = () => {\n    history.push(\"/list-project\");\n  };\n\n  // for memo\n  useEffect(() => {\n    findProjectById(id);\n  }, [id]);\n\n  console.log(calculateDaysLeft(form.startDate, form.endDate));\n  return (\n    <div>\n      <div style={{ display: show ? \"block\" : \"none\" }}>\n        <ToastComponent\n          children={{\n            show: show,\n            message: method === \"post\" ? \"Project Saved!\" : \"Project Updated!\",\n            type: \"success\",\n          }}\n        />\n      </div>\n\n      <Card\n        className={\"border border-dark bg-dark text-white\"}\n        style={{ margin: \"45px 0px\" }}\n      >\n        <Card.Header>{id ? \"Update Project\" : \"Save Project\"}</Card.Header>\n\n        <Form\n          id=\"projectFormId\"\n          onSubmit={id ? updateProject : submitProject}\n          onReset={resetProject}\n        >\n          <Card.Body>\n            <Form.Group as={Col}>\n              <Form.Label>Project Name</Form.Label>\n              <Form.Control\n                required\n                autoComplete=\"off\"\n                type=\"text\"\n                name=\"projectName\"\n                placeholder=\"Enter project name\"\n                className={\"bg-dark text-white\"}\n                onChange={projectChange}\n                value={form.projectName}\n              />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Label>Cost</Form.Label>\n              <Form.Control\n                required\n                autoComplete=\"off\"\n                type=\"number\"\n                step=\"any\"\n                name=\"cost\"\n                placeholder=\"Enter project cost\"\n                className={\"bg-dark text-white\"}\n                onChange={projectChange}\n                value={form.cost}\n              />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Label>Started Date </Form.Label>\n              <br />\n              <Form.Control\n                required\n                type=\"date\"\n                name=\"startedTime\"\n                placeholder=\"Date of End\"\n                onChange={projectChange}\n                value={form.startDate}\n                className={\"bg-dark text-white\"}\n              />\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Label>End Date </Form.Label>\n              <br />\n              <Form.Control\n                required\n                type=\"date\"\n                name=\"endDate\"\n                placeholder=\"Date of Start\"\n                onChange={projectChange}\n                value={form.endDate}\n                className={\"bg-dark text-white\"}\n              />\n            </Form.Group>\n          </Card.Body>\n          <Card.Footer style={{ textAlign: \"right\" }}>\n            <Button\n              size=\"sm\"\n              type=\"submit\"\n              variant=\"success\"\n              style={{ margin: \"2px\" }}\n            >\n              {id ? \"Update\" : \"Save\"}\n            </Button>\n            <Button\n              size=\"sm\"\n              type=\"reset\"\n              variant=\"info\"\n              style={{ margin: \"2px\" }}\n            >\n              Reset\n            </Button>\n            <Button\n              size=\"sm\"\n              type=\"button\"\n              variant=\"info\"\n              style={{ margin: \"2px\" }}\n              onClick={projectList}\n            >\n              Project List\n            </Button>\n          </Card.Footer>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default React.memo(AddProject);\n"]},"metadata":{},"sourceType":"module"}