{"ast":null,"code":"var _jsxFileName = \"/home/rahimgng/vscode/admin-dashboard/src/component/ProgressList.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-lone-blocks */\nimport { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\"; // function ProgressList() {\n//   let pro = [];\n//   useEffect(() => {\n//     axios.get(\"http://localhost:8080/progress/get\").then((res) => {\n//       console.log(res.data);\n//       for (const dataObj of res.data) {\n//         pro.push(dataObj);\n//       }\n//     });\n//   });\n//   const data = {\n//     labels: pro,\n//     datasets: [\n//       {\n//         label: \"# of Votes\",\n//         data: [36, 19, 3, 5, 2, 3],\n//         backgroundColor: [\n//           \"rgba(255, 99, 132, 0.2)\",\n//           \"rgba(54, 162, 235, 0.2)\",\n//           \"rgba(255, 206, 86, 0.2)\",\n//           \"rgba(75, 192, 192, 0.2)\",\n//           \"rgba(153, 102, 255, 0.2)\",\n//           \"rgba(255, 159, 64, 0.2)\",\n//         ],\n//         borderColor: [\n//           \"rgba(255, 99, 132, 1)\",\n//           \"rgba(54, 162, 235, 1)\",\n//           \"rgba(255, 206, 86, 1)\",\n//           \"rgba(75, 192, 192, 1)\",\n//           \"rgba(153, 102, 255, 1)\",\n//           \"rgba(255, 159, 64, 1)\",\n//         ],\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n//   return (\n//     <div>\n//       <Doughnut data={data} style={{ width: \"20px\", height: \"20px\" }} />\n//     </div>\n//   );\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProgressList() {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n  const [projects, setProjects] = useState([]); // const projects = res.data.reduce(\n  //   (projectsSoFar, { userName, projectName }) => {\n  //     if (!projectsSoFar[userName]) projectsSoFar[userName] = [];\n  //     projectsSoFar[userName].push(projectName);\n  //     return projectsSoFar;\n  //   },\n  //   {}\n  //  );\n  // console.log(projects);\n\n  const chart = () => {\n    let pro = [];\n    let use = [];\n    axios // .get(\"http://dummy.restapiexample.com/api/v1/employees\")\n    .get(\"http://localhost:8080/progress/get/\").then(res => setProjects(res.data)).catch(err => {\n      console.log(err);\n    });\n\n    for (const dataObj of projects) {\n      pro.push(dataObj.projectName);\n      use.push(dataObj.userName);\n    }\n\n    setChartData({\n      labels: use,\n      datasets: [{\n        label: \"which user which project\",\n        data: pro,\n        backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n        borderWidth: 4\n      }]\n    });\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          title: {\n            text: \"THICCNESS SCALE\",\n            display: true\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: 10,\n                beginAtZero: true\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              }\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProgressList, \"Ct3TGGe0CkVxnPWeSYCgw65M3aE=\");\n\n_c = ProgressList;\nexport default ProgressList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressList\");","map":{"version":3,"sources":["/home/rahimgng/vscode/admin-dashboard/src/component/ProgressList.js"],"names":["useEffect","useState","Line","axios","ProgressList","chartData","setChartData","projects","setProjects","chart","pro","use","get","then","res","data","catch","err","console","log","dataObj","push","projectName","userName","labels","datasets","label","backgroundColor","borderWidth","responsive","title","text","display","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":";;;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC,CAFsB,CAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMQ,KAAK,GAAG,MAAM;AAClB,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,GAAG,GAAG,EAAV;AACAR,IAAAA,KAAK,CACH;AADG,KAEFS,GAFH,CAEO,qCAFP,EAGGC,IAHH,CAGSC,GAAD,IAASN,WAAW,CAACM,GAAG,CAACC,IAAL,CAH5B,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KANH;;AAQA,SAAK,MAAMG,OAAX,IAAsBb,QAAtB,EAAgC;AAC9BG,MAAAA,GAAG,CAACW,IAAJ,CAASD,OAAO,CAACE,WAAjB;AACAX,MAAAA,GAAG,CAACU,IAAJ,CAASD,OAAO,CAACG,QAAjB;AACD;;AAEDjB,IAAAA,YAAY,CAAC;AACXkB,MAAAA,MAAM,EAAEb,GADG;AAEXc,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,0BADT;AAEEX,QAAAA,IAAI,EAAEL,GAFR;AAGEiB,QAAAA,eAAe,EAAE,CAAC,yBAAD,CAHnB;AAIEC,QAAAA,WAAW,EAAE;AAJf,OADQ;AAFC,KAAD,CAAZ;AAWD,GA3BD;;AA6BA5B,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK;AACN,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,IAAI,EAAEJ,SADR;AAEE,QAAA,OAAO,EAAE;AACPwB,UAAAA,UAAU,EAAE,IADL;AAEPC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAE,iBAAR;AAA2BC,YAAAA,OAAO,EAAE;AAApC,WAFA;AAGPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,CACL;AACEC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,QAAQ,EAAE,IADL;AAELC,gBAAAA,aAAa,EAAE,EAFV;AAGLC,gBAAAA,WAAW,EAAE;AAHR,eADT;AAMEC,cAAAA,SAAS,EAAE;AACTP,gBAAAA,OAAO,EAAE;AADA;AANb,aADK,CADD;AAaNQ,YAAAA,KAAK,EAAE,CACL;AACED,cAAAA,SAAS,EAAE;AACTP,gBAAAA,OAAO,EAAE;AADA;AADb,aADK;AAbD;AAHD;AAFX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GA/EQ5B,Y;;KAAAA,Y;AAiFT,eAAeA,YAAf","sourcesContent":["/* eslint-disable no-lone-blocks */\nimport { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\n\n// function ProgressList() {\n//   let pro = [];\n//   useEffect(() => {\n//     axios.get(\"http://localhost:8080/progress/get\").then((res) => {\n//       console.log(res.data);\n//       for (const dataObj of res.data) {\n//         pro.push(dataObj);\n//       }\n//     });\n//   });\n\n//   const data = {\n//     labels: pro,\n//     datasets: [\n//       {\n//         label: \"# of Votes\",\n//         data: [36, 19, 3, 5, 2, 3],\n//         backgroundColor: [\n//           \"rgba(255, 99, 132, 0.2)\",\n//           \"rgba(54, 162, 235, 0.2)\",\n//           \"rgba(255, 206, 86, 0.2)\",\n//           \"rgba(75, 192, 192, 0.2)\",\n//           \"rgba(153, 102, 255, 0.2)\",\n//           \"rgba(255, 159, 64, 0.2)\",\n//         ],\n//         borderColor: [\n//           \"rgba(255, 99, 132, 1)\",\n//           \"rgba(54, 162, 235, 1)\",\n//           \"rgba(255, 206, 86, 1)\",\n//           \"rgba(75, 192, 192, 1)\",\n//           \"rgba(153, 102, 255, 1)\",\n//           \"rgba(255, 159, 64, 1)\",\n//         ],\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div>\n//       <Doughnut data={data} style={{ width: \"20px\", height: \"20px\" }} />\n//     </div>\n//   );\n// }\nfunction ProgressList() {\n  const [chartData, setChartData] = useState({});\n  const [projects, setProjects] = useState([]);\n  // const projects = res.data.reduce(\n  //   (projectsSoFar, { userName, projectName }) => {\n  //     if (!projectsSoFar[userName]) projectsSoFar[userName] = [];\n  //     projectsSoFar[userName].push(projectName);\n  //     return projectsSoFar;\n  //   },\n  //   {}\n  //  );\n  // console.log(projects);\n  const chart = () => {\n    let pro = [];\n    let use = [];\n    axios\n      // .get(\"http://dummy.restapiexample.com/api/v1/employees\")\n      .get(\"http://localhost:8080/progress/get/\")\n      .then((res) => setProjects(res.data))\n      .catch((err) => {\n        console.log(err);\n      });\n\n    for (const dataObj of projects) {\n      pro.push(dataObj.projectName);\n      use.push(dataObj.userName);\n    }\n\n    setChartData({\n      labels: use,\n      datasets: [\n        {\n          label: \"which user which project\",\n          data: pro,\n          backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n          borderWidth: 4,\n        },\n      ],\n    });\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Projects</h1>\n      <div>\n        <Line\n          data={chartData}\n          options={{\n            responsive: true,\n            title: { text: \"THICCNESS SCALE\", display: true },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    beginAtZero: true,\n                  },\n                  gridLines: {\n                    display: false,\n                  },\n                },\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    display: false,\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressList;\n"]},"metadata":{},"sourceType":"module"}